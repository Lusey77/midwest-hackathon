"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var https = require("https");
var URL = require("url");
var VirtualDevice = (function () {
    function VirtualDevice(token, locale, voiceID) {
        this.token = token;
        this.locale = locale;
        this.voiceID = voiceID;
        this.baseURL = process.env.VIRTUAL_DEVICE_BASE_URL
            ? process.env.VIRTUAL_DEVICE_BASE_URL
            : "https://virtual-device.bespoken.io";
    }
    VirtualDevice.prototype.normalizeMessage = function (message) {
        if (message.trim().split(" ").length === 1) {
            message = "alexa " + message;
        }
        return message;
    };
    VirtualDevice.prototype.message = function (message, debug) {
        var _this = this;
        message = this.normalizeMessage(message);
        var url = this.baseURL + "/process?message=" + message + "&user_id=" + this.token;
        if (debug) {
            url += "&debug=true";
        }
        if (this.locale) {
            url += "&language_code=" + this.locale;
        }
        if (this.voiceID) {
            url += "&voice_id=" + this.voiceID;
        }
        url = encodeURI(url);
        return new Promise(function (resolve, reject) {
            var callback = function (response) {
                var data = "";
                response.on("data", function (chunk) {
                    data += chunk;
                });
                response.on("end", function () {
                    if (response.statusCode === 200) {
                        var result = JSON.parse(data);
                        result.transcript = _this.normalizeTranscript(result.transcript);
                        result.message = message;
                        resolve(result);
                    }
                    else {
                        reject(data);
                    }
                });
            };
            var request = https.get(url, callback);
            request.on("error", function (error) {
                reject(error);
            });
            request.end();
        });
    };
    VirtualDevice.prototype.batchMessage = function (messages, debug) {
        var _this = this;
        for (var _i = 0, messages_1 = messages; _i < messages_1.length; _i++) {
            var message = messages_1[_i];
            message.text = this.normalizeMessage(message.text);
        }
        var path = "/batch_process?user_id=" + this.token;
        if (debug) {
            path += "&debug=true";
        }
        if (this.locale) {
            path += "&language_code=" + this.locale;
        }
        if (this.voiceID) {
            path += "&voice_id=" + this.voiceID;
        }
        var url = URL.parse(this.baseURL);
        return new Promise(function (resolve, reject) {
            var callback = function (response) {
                var data = "";
                response.on("data", function (chunk) {
                    data += chunk;
                });
                response.on("end", function () {
                    if (response.statusCode === 200) {
                        resolve(_this.handleBatchResponse(data));
                    }
                    else {
                        reject(data);
                    }
                });
            };
            var input = {
                messages: messages,
            };
            var inputString = JSON.stringify(input);
            var requestOptions = {
                headers: {
                    "Content-Length": new Buffer(inputString).length,
                    "Content-Type": "application/json",
                },
                host: url.hostname,
                method: "POST",
                path: path,
                port: 443,
            };
            var request = https.request(requestOptions, callback);
            request.on("error", function (error) {
                reject(error);
            });
            request.write(inputString);
            request.end();
        });
    };
    VirtualDevice.prototype.resetSession = function (locale) {
        var message = "quit";
        if (locale && locale === "de-DE") {
            message = "stopp";
        }
        return this.message(message);
    };
    VirtualDevice.prototype.handleBatchResponse = function (data) {
        var json = JSON.parse(data);
        var results = [];
        for (var _i = 0, _a = json.results; _i < _a.length; _i++) {
            var result = _a[_i];
            result.transcript = this.normalizeTranscript(result.transcript);
            results.push(result);
        }
        return results;
    };
    VirtualDevice.prototype.normalizeTranscript = function (transcript) {
        if (!transcript) {
            return null;
        }
        return transcript.toLowerCase();
    };
    return VirtualDevice;
}());
exports.VirtualDevice = VirtualDevice;
//# sourceMappingURL=VirtualDevice.js.map