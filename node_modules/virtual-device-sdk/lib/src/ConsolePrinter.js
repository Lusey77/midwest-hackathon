"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chalk = require("chalk");
var path = require("path");
var TEST_NAME_LENGTH = 20;
var TEST_ACTUAL_LENGTH = 37;
var TEST_EXPECTED_LENGTH = 37;
var TAB = "  ";
var ConsolePrinter = (function () {
    function ConsolePrinter() {
    }
    ConsolePrinter.rpad = function (s, padString, length) {
        if (!s) {
            s = "";
        }
        if (Array.isArray(s)) {
            s = s.toString();
        }
        while (s.length < length) {
            s = s + padString;
        }
        return s.substring(0, length);
    };
    ConsolePrinter.concat = function (buffer, line, error) {
        var color = chalk.default.green;
        if (error) {
            color = chalk.default.red;
        }
        buffer += color(line) + "\n";
        return buffer;
    };
    ConsolePrinter.prototype.printResultsByFile = function (resultsByFile) {
        var output = "";
        for (var _i = 0, _a = Object.keys(resultsByFile); _i < _a.length; _i++) {
            var file = _a[_i];
            var result = resultsByFile[file];
            var shortFile = path.basename(file);
            output += this.printResult(shortFile, result);
        }
        return output;
    };
    ConsolePrinter.prototype.printResult = function (name, result) {
        var out = chalk.default.green;
        if (result.result !== "success") {
            out = chalk.default.red;
        }
        var line = name + "\n";
        var output = out(line);
        for (var _i = 0, _a = result.tests; _i < _a.length; _i++) {
            var testResult = _a[_i];
            if (testResult.test.sequenceIndex === 1) {
                var sequenceLine = TAB + "Sequence " + testResult.test.sequence + ": " + testResult.test.input;
                output = ConsolePrinter.concat(output, sequenceLine, this.sequenceHasError(testResult.test.sequence, result.tests));
            }
            line = TAB + TAB;
            if (testResult.result !== "success") {
                var error = testResult.errors[0];
                line += ConsolePrinter.rpad(testResult.test.input, " ", TEST_NAME_LENGTH)
                    + "  " + error.property;
                var actualLine = TAB + TAB + TAB + "Actual:   " + error.actual;
                var expectedLine = TAB + TAB + TAB + "Expected: " + error.expected;
                output = ConsolePrinter.concat(output, line, true);
                output = ConsolePrinter.concat(output, actualLine, true);
                output = ConsolePrinter.concat(output, expectedLine, true);
            }
            else {
                var actual = testResult.actual ? testResult.actual.transcript : "";
                var expected = testResult.test.expected ? testResult.test.expected.transcript : "";
                line += ConsolePrinter.rpad(testResult.test.input, " ", TEST_NAME_LENGTH)
                    + "  Actual: " + ConsolePrinter.rpad(actual, " ", TEST_ACTUAL_LENGTH)
                    + "  Expected: " + ConsolePrinter.rpad(expected, " ", TEST_EXPECTED_LENGTH);
                output = ConsolePrinter.concat(output, line, false);
            }
        }
        return output;
    };
    ConsolePrinter.prototype.sequenceHasError = function (sequence, testResults) {
        for (var _i = 0, testResults_1 = testResults; _i < testResults_1.length; _i++) {
            var testResult = testResults_1[_i];
            if (testResult.test.sequence === sequence && testResult.result !== "success") {
                return true;
            }
        }
        return false;
    };
    return ConsolePrinter;
}());
exports.ConsolePrinter = ConsolePrinter;
//# sourceMappingURL=ConsolePrinter.js.map