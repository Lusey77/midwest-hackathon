{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:///./src/controllers/intentController.ts","webpack:///./src/controllers/amazonController.ts","webpack:///./src/controllers/ssml.helpers.ts","webpack:///external \"aws-sdk\"","webpack:///./src/controllers/alexaController.ts","webpack:///external \"alexa-sdk\"","webpack:///./src/index.ts"],"names":["root","factory","exports","module","define","amd","a","i","global","installedModules","__webpack_require__","moduleId","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","IntentController","[object Object]","handler","this","intentController_1","AmazonController","super","emit","pause","interjection","date","require","aws_sdk_1","ssml_helpers_1","AlexaController","_dynamodb","DynamoDB","apiVersion","request","event","attributes","intent","slots","Query","recording","speechOutput","record","undefined","toString","PatientId","params","TableName","Key","S","getItem","err","data","Item","FirstName","LastName","DateOfBirth","firstName","lastName","birthday","systolic","diastolic","Date","noteToAdd","note","slice","Note","L","M","PhysicianId","NoteAdded","putItem","length","Alexa","alexaController_1","amazonController_1","context","alexa","registerHandlers","NewSession","newSession","Record","PreviousRecord","previousRecord","GetName","getName","GetBirthday","getBirthday","BloodPressure","getBloodPressure","TakeNote","takeNote","GetLastNote","getLastNote","AMAZON.HelpIntent","help","AMAZON.CancelIntent","cancel","AMAZON.StopIntent","stop","Unhandled","unhandled","execute"],"mappings":"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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(global, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 6);\n","import {Handler, Request} from 'alexa-sdk';\r\n\r\nexport class IntentController {\r\n    protected handler: Handler<Request>;\r\n\r\n    constructor(handler: Handler<Request>) {\r\n        this.handler = handler;\r\n    }\r\n}","import {Handler, Request} from 'alexa-sdk';\r\nimport {IntentController} from './intentController';\r\n\r\nexport class AmazonController extends IntentController {\r\n    constructor(handler: Handler<Request>) {\r\n        super(handler);\r\n    }\r\n\r\n    help() {\r\n        this.handler.emit(':tell', 'Hey yo, I\\'m sorry, but you don\\'t get no help. Sucka!');\r\n    }\r\n\r\n    cancel() {\r\n        this.handler.emit(':tell', 'Cancelling ok');\r\n    }\r\n\r\n\r\n    stop() {\r\n        this.handler.emit(':tell', 'Stopping ok');\r\n    }\r\n\r\n    unhandled() {\r\n        this.handler.emit(':ask', 'I am sorry, but do not know how to handle your request. If you would like to record, just say record this followed by what ever you would like to record.');\r\n    }\r\n\r\n}","export const pause = `<break time=\"0.3s\"/>`;\r\n\r\nexport function interjection(value: any) {\r\n    return `<say-as interpret-as=\"interjection\">${value}</say-as>`;\r\n}\r\n\r\nexport function date(value: any) {\r\n    return `<say-as interpret-as=\"date\">${value}</say-as>`;\r\n}","module.exports = require(\"aws-sdk\");","import {Handler, IntentRequest, Request} from 'alexa-sdk';\r\nimport {DynamoDB} from 'aws-sdk';\r\nimport {IntentController} from './intentController';\r\nimport {date, interjection, pause} from './ssml.helpers';\r\n\r\nexport class AlexaController extends IntentController {\r\n    private _dynamodb: DynamoDB;\r\n\r\n    constructor(handler: Handler<Request>) {\r\n        super(handler);\r\n        this._dynamodb = new DynamoDB({apiVersion: '2012-08-10'});\r\n    }\r\n\r\n    newSession(): void {\r\n        this.handler.emit(':ask', 'Welcome to this recording app. I can help you by recording your voice. I am ready to start recording at any time. Just say record this followed by what ever you would like to record.');\r\n    }\r\n\r\n    record(): void {\r\n        const request: IntentRequest = this.handler.event.request;\r\n\r\n        this.handler.attributes['recording'] = request.intent.slots.Query.value;\r\n        const recording = this.handler.attributes['recording'];\r\n        const speechOutput = `${pause} If you would like to record something else, just say record this followed by what ever you would like to record, or listen to what you recorded by asking: What did i just re-cord?`;\r\n\r\n        this.handler.emit(':ask', `You recorded: ${recording} ${speechOutput}`, `Just say record this followed by what ever you would like to record, or listen to what you recorded by asking: What did i just re-cord?`);\r\n    }\r\n\r\n    previousRecord(): void {\r\n        const record = this.handler.attributes['recording'];\r\n        if (record === undefined) {\r\n            this.handler.emit(':ask', `You have not recorded anything during this session. If you would like to record something, just say record this followed by what ever you would like to record.`, 'Just say record this followed by what ever you would like to record.');\r\n        } else {\r\n            this.handler.emit(':ask', `${interjection('all righty!')} You previously recorded the following: ${record} ${pause} If you would like to record something else, just say record this followed by what ever you would like to record.`);\r\n        }\r\n    }\r\n\r\n    getName() {\r\n        const request: IntentRequest = this.handler.event.request;\r\n\r\n        this.handler.attributes['physician_id'] = (1928374650).toString();\r\n        this.handler.attributes['patient_id'] = (request.intent.slots.PatientId.value);\r\n\r\n        const params = {\r\n            TableName: 'Patients',\r\n            Key: {\r\n                'PatientId': {S: this.handler.attributes['patient_id']},\r\n            },\r\n        };\r\n\r\n        this._dynamodb.getItem(params, function (err, data) {\r\n            if (err) {\r\n                this.handler.emit(':ask', 'I did not find the patient in the database. Please state the patient id again by saying patient ID followed by the identification number of the patient.');\r\n            }\r\n\r\n            this.handler.attributes['first_name'] = data.Item.FirstName.S;\r\n            this.handler.attributes['last_name'] = data.Item.LastName.S;\r\n            this.handler.attributes['date_of_birth'] = data.Item.DateOfBirth.S;\r\n\r\n            const firstName = this.handler.attributes['first_name'];\r\n            const lastName = this.handler.attributes['last_name'];\r\n\r\n            const speechOutput = `${pause} Please verify the patient by stating the paytients birthday like this, ${date(19910726)}`;\r\n\r\n            this.handler.emit(':ask', `Starting session for patient: ${firstName} ${lastName} ${speechOutput}`, ``);\r\n        });\r\n    }\r\n\r\n    getBirthday() {\r\n        const request: IntentRequest = this.handler.event.request;\r\n\r\n        this.handler.attributes['patient_stated_dob'] = request.intent.slots.birthday.value;\r\n\r\n        if (this.handler.attributes['first_name'] === undefined) {\r\n            this.handler.emit(':ask', 'You have not stated the name of the patient. Please start by saying Patient: followed by the name of the patient.', '');\r\n        } else if (this.handler.attributes['patient_stated_dob'] !== this.handler.attributes['date_of_birth']) {\r\n            this.handler.emit(':ask', 'The birthday that you gave does not match what is stated in the database. Please verify the birthday again or select a different patient.');\r\n        } else {\r\n            this.handler.emit(':ask', `We will now start entering information for ${this.handler.attributes['first_name']} ${pause} born on ${this.handler.attributes['date_of_birth']} ${pause}. To record a note say take note, record note, or make note followed by the note that you would like to record.`, '');\r\n        }\r\n    }\r\n\r\n    getBloodPressure() {\r\n        const request: IntentRequest = this.handler.event.request;\r\n\r\n        const systolic = request.intent.slots.systolic.value;\r\n        const diastolic = request.intent.slots.diastolic.value;\r\n\r\n        if (this.handler.attributes['first_name'] === undefined && this.handler.attributes['date_of_birth'] === undefined) {\r\n            this.handler.emit(':ask', 'You have not stated the name of the patient. Please start by saying Patient: followed by the name of the patient.');\r\n        } else if (this.handler.attributes['first_name'] !== undefined && this.handler.attributes['date_of_birth'] === undefined) {\r\n            this.handler.emit(':ask', `You have not stated the birthday of the patient. Please verify the patient by stating the paytients birthday like this, ${date(19910726)}`);\r\n        } else {\r\n            this.handler.emit(':ask', `${this.handler.attributes['first_name']}'s blood pressure is ${systolic} over ${diastolic}`, '');\r\n        }\r\n    }\r\n\r\n    takeNote() {\r\n        const request: IntentRequest = this.handler.event.request;\r\n\r\n        this.handler.attributes['current_date'] = new Date();\r\n\r\n        if (this.handler.attributes['first_name'] === undefined && this.handler.attributes['date_of_birth'] === undefined) {\r\n            this.handler.emit(':ask', 'You have not stated the name of the patient. Please start by saying Patient: followed by the name of the patient.');\r\n        } else if (this.handler.attributes['first_name'] !== undefined && this.handler.attributes['date_of_birth'] === undefined) {\r\n            this.handler.emit(':ask', `You have not stated the birthday of the patient. Please verify the patient by stating the paytients birthday like this, ${date(19910726)}`);\r\n        } else {\r\n            const noteToAdd = request.intent.slots.note.value;\r\n\r\n            const date = this.handler.attributes['current_date'].toString().slice(0, -24);\r\n\r\n            const params = {\r\n                TableName: 'Patients',\r\n                Item: {\r\n                    'PatientId': {S: this.handler.attributes['patient_id']},\r\n                    'FirstName': {S: this.handler.attributes['first_name']},\r\n                    'LastName': {S: this.handler.attributes['last_name']},\r\n                    'DateOfBirth': {S: this.handler.attributes['date_of_birth']},\r\n                    'Note': {\r\n                        L: [\r\n                            {\r\n                                M: {\r\n                                    'Date': {'S': this.handler.attributes['current_date'].toString()},\r\n                                    'PhysicianId': {'S': this.handler.attributes['physician_id']},\r\n                                    'NoteAdded': {'S': noteToAdd},\r\n                                }\r\n                            }\r\n                        ]\r\n                    }\r\n\r\n                },\r\n            };\r\n            this._dynamodb.putItem(params, function (err) {\r\n                if (err) {\r\n                    // TODO: Emit event\r\n                } else {\r\n                    this.handler.emit(':ask', `You recorded ${noteToAdd} ${pause} The note was successfully recorded. To record another note say take note, record note, or make note followed by the note that you would like to record. If you would like to retrieve the last note that you recorded just say get last note`, '');\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    getLastNote() {\r\n        if ((this.handler.attributes['first_name'] === undefined) && (this.handler.attributes['date_of_birth'] === undefined)) {\r\n            this.handler.emit(':ask', 'You have not stated the name of the patient. Please start by saying Patient: followed by the name of the patient.');\r\n        } else if ((this.handler.attributes['first_name'] !== undefined) && (this.handler.attributes['date_of_birth'] === undefined)) {\r\n            this.handler.emit(':ask', `You have not stated the birthday of the patient. Please verify the patient by stating the patients birthday like this, ${date(19910726)}`);\r\n        } else {\r\n            const params = {\r\n                TableName: 'Patients',\r\n                Key: {\r\n                    'PatientId' : {S: this.handler.attributes['patient_id']},\r\n                },\r\n            };\r\n\r\n            this._dynamodb.getItem(params, function(err, data) {\r\n                if (err) {\r\n                    this.handler.emit(':ask', 'I did not find the patient in the database. Please state the patient id again by saying patient ID followed by the identification number of the patient.');\r\n                }\r\n\r\n                this.handler.attributes['first_name'] = data.Item.FirstName.S;\r\n                this.handler.attributes['last_name'] = data.Item.LastName.S;\r\n                this.handler.attributes['last_note_info'] = data.Item.Note.L[data.Item.Note.L.length - 1];\r\n\r\n                const firstName = this.handler.attributes['first_name'];\r\n                const lastName = this.handler.attributes['last_name'];\r\n                const speechOutput = `${pause} was ${this.handler.attributes['last_note_info'].M.NoteAdded.S} on ${this.handler.attributes['last_note_info'].M.Date.S}`;\r\n\r\n                this.handler.emit(':ask', `The last note added for ${firstName} ${lastName} ${speechOutput}`, '');\r\n\r\n            });\r\n        }\r\n    }\r\n}","module.exports = require(\"alexa-sdk\");","import * as Alexa from 'alexa-sdk';\r\nimport {AlexaController} from './controllers/alexaController';\r\nimport {AmazonController} from './controllers/amazonController';\r\n\r\nexport const handler = function (event: Alexa.RequestBody<Alexa.Request>, context: Alexa.Context): void {\r\n    const alexa = Alexa.handler(event, context);\r\n    alexa.registerHandlers({\r\n        'NewSession': function () {\r\n            new AlexaController(this).newSession();\r\n        },\r\n        'Record': function () {\r\n            new AlexaController(this).record();\r\n        },\r\n        'PreviousRecord': function () {\r\n            new AlexaController(this).previousRecord();\r\n        },\r\n        'GetName': function () {\r\n            new AlexaController(this).getName();\r\n        },\r\n        'GetBirthday': function () {\r\n            new AlexaController(this).getBirthday();\r\n        },\r\n        'BloodPressure': function () {\r\n            new AlexaController(this).getBloodPressure();\r\n        },\r\n        'TakeNote': function () {\r\n            new AlexaController(this).takeNote();\r\n        },\r\n        'GetLastNote': function () {\r\n            new AlexaController(this).getLastNote();\r\n        },\r\n        'AMAZON.HelpIntent': function () {\r\n            new AmazonController(this).help();\r\n        },\r\n        'AMAZON.CancelIntent': function () {\r\n            new AmazonController(this).cancel();\r\n        },\r\n        'AMAZON.StopIntent': function () {\r\n            new AmazonController(this).stop();\r\n        },\r\n        'Unhandled': function () {\r\n            new AmazonController(this).unhandled();\r\n        }\r\n    });\r\n    alexa.execute();\r\n};\r\n"],"sourceRoot":""}